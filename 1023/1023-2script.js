//반복문2 - while문

/**
 * 어떤 조건이 성립하는 동안 반복처리를 실행하는 제어문이다
 * for문과는 다르게 반복할 횟수가 정해져 있지 않을 경우에 활용한다
 * 
 * 기본형태)
 * while(반복 실행을 결정하는 조건) {
 *  반복해서 실행하고 싶은 처리
 * }
 * 
 * 조건이 참일 경우, 대괄호 안에 있는 반복해서 실행하고 싶은 처리를 진행한다
 * 조건이 거짓일 경우, 대괄호 안에 있는 반복해서 실행하고 싶은 처리를 진행하지 않는다
 * 
 * 조건이 참이어서 반복 처리를 수행한 후에는 다시 한번 반복 실행 조건을 비교해서 조건의 참/거짓을 판별한다
 * 판별 결과에 따라 다시 처리를 반복할지 안할지를 결정
 * 
 * while(true){
 *  처리
 * }
 */

a = 0;
while(a < 5) {
    alert("폭탄 팝업");
    a++;
}
/**
 * while문과 for문은 서로 바꾸어서 코드를 작성할 수 있다
 */
for(i = 0; i < 5; i++){
    alert("for문으로 만든 폭탄 팝업");
}

//반복문3 - do while문
/**
 * do-while문은 while문과 마찬가지로 반복을 수행하는 구문이다
 * do-while문은 while문과는 달리
 * do{
 *     처리내용
 * }
 * 으로 구성된 부분을 반복을 수행하기 전에 꼭 한번 실행하게 되는 차이점이 있다
 *
 * 기본형태)
 * do {
 *      반복처리를 하기 전에 먼저 처리하고 싶은 내용
 * } while(조건);
 */
/**
 * while과 do~while과의 차이점
 * 
 * while은 비교 후에 참이면 반복을 처리하고 거짓이면 반복을 처리하지 않는다
 * do~while은 반복내용을 처리하고 비교후에 참이면 다시 반복내용을 처리,
 * 거짓이면 반복하지 않는다
 * 
 * 경우에 따라서는 비교결과에 따라
 * while문은 반복내용이 1번도 처리되지 않을 수도 있다(반복처리 불가)
 * do~while문은 반복내용을 적어도 1번 처리할 수 있다(처리 후 비교하기 때문에)
 */

