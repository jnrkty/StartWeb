window.document.write("정나래");

//HTML 문서에 글자를 표시하는 코드
/**
 * 문자열을 표시할 때 쌍따옴표(""), 따옴표('') 모두 사용 가능하다
 * 코드 마지막에는 세미콜론(;)을 작성한다
 * 
 */
window.document.write("Hello narae!!");

//대화상자(메시지창)을 표시하는 코드
window.alert("안녕하세요");

//웹페이지 배경색을 바꾸는 코드
/**
 * 다음에는 색상 이름 혹은 색상의 RGB코드를 작성한다
 * 색상 이름은 www.W3School.com에서 color name을 검색하면 색상 목록이 출력된다
 */
window.document.bgColor="AliceBlue";

//웹페이지 안의 전체 글자색을 바꾸는 코드
window.document.fgColor="blue";

//변수
/**
 * 변수에 값(데이터)를 넣으려면 대입연산자(=)를 활용한다
 * 변수 이름은 =을 기준으로 왼편에, 데이터는 오른편에 적는다
 * 마지막은 ;
 * 변수 이름 규칙 : 영문자, 언더바(_), 달러기호($)
 * 단, 맨 첫문자로는 숫자는 올 수 없다(1abc 안됨)
 * 대소문자 구분한다
 */
a = 1;
b = "글자";
b = 3;

/**
 * 최종적으로 변수 a에는 1이 저장, b에는 "글자" -> 3으로 바뀌어서 저장
 */

//자료의 형태1 - Number
/**
 * Number 자료형에는 정수, 음수, 실수 모두 저장이 가능하다
 */
 a = 1;
 a = -1;
 a = 1.1;

//자료의 형태2 - boolean
/**
 * boolean 자료형은 true(참) 혹은 false(거짓)만 저장이 가능하다
 * 보통 boolean 자료형을 쓰는 경우는 2가지 중 한가지 상태일 때,
 * ex) 회원여부, 결제여부 등을 표시할 때 쓴다 
 */
 b = true;
 c = false;

//자료의 형태3 - 문자열(String)
/**
 * 문자열이란 : 하나 이상의 문자를 나열한 것
 * 문자열은 큰따옴표 혹은 작은 따옴표로 감싸서 표현
 * ex) "abcd" , 'abcd' ,
 */

 d = "abcd";

//이스케이프 시퀸스
/**
 * 문자열을 처리할 때 특정 문자가 문자열에 있으면,
 * 해당 특정 문자는 글자로 처리하지 않는 문자들
 * \n : 줄바꿈
 * \t : 탭
 * \" : 따옴표를 글자로 표시한다
 * \' : 작은따옴표를 글자로 표시한다
 * 
 * 문자열 중에 따옴표 혹은 작은따옴표를 중복으로 쓰지 않는다
 * ex) d = "abc("")"; <- 이렇게 쓰지 않음
 * d = "abc('')"; <- 안쪽의 따옴표를 작은따옴표로 바꿔 쓴다
 */
 d = "<pre>ab\ncd</pre>";

 window.document.write(d);
/**
 * 문자열을 html에 출력할 때 <pre></pre>태그를 붙여준다
 */
d = "ab\ncd"
alert(d);

//자료의 형태4 - 오브젝트(Object)형
/**
 * 사용자가 기본 자료형(number, string, boolean)을 조합해서 만든 사용자 정의 자료형
 * 
 * 학생의 점수 정보를 저장한다고 했을 때
 * 기본 자료형으로만 저장한다면, 
 * 수학점수 : Number,
 * 학생이름 : String
 * 
 * 학생점수 정보 저장을 위해 Number형, String형 변수 한개씩을 묶어서 오브젝트 변수로 만듦
 * 표현할 수 있는 데이터 형태가 다양해짐
 * 코드를 작성할 때 별도의 변수를 창조하는 것보다 데이터를 가져오기 편하다
 */

//자료의 형태5 - null형
/**
 * 값이 없다
 */

//자료의 형태6 - 미정의(undefined)형
/**
 * 변수가 존재하지 않는다
 */

//자료의형태7 - NaN(Not a Number)형
/**
 * 데이터가 숫자가 아니다
 * ex) 글자를 숫자로 바꾸고 싶을 경우
 * '1' -> 1
 * '가나다라' -> NaN (못바꿈)
 */

//자료의 형태8 - Infinity형
/**
 * 무한대를 표시한다 
 * ex) num = 100 / 0;
 * num -> 'Infinity'가 표시
 * ex2) num = -100 / 0;
 * num -> '-Infinity'가 표시
 */

//데이터 형 변환하기
/**
 * case1) 문자열을 숫자(정수)로 바꾸는 경우
 		* parseInt() -> 괄호 안에 문자열을 넣는다
 		* ex)
 		* a = "234";
 		* num = parseInt(a);
 		* num -> 234(숫자)
 		* 
 		* ex2)
 		* a = "hi";
 		* num = parseInt(a);
 		* num -> NaN(숫자가 아니다)
 		* 
 * case2) 문자열을 숫자(소수)로 바꾸는 경우
 		* parseFloat() -> 괄호 안에 문자열을 넣는다
 		* ex)
		* b = "3.14";
		* num = parsFloat(b);
		* num = 3.14(소수)

  * case3) 숫자, boolean형을 문자열로 바꾸는 경우
		* 변수이름.toString(); -> 변수이름이 붙는다, 괄호 안에는 아무것도 쓰지 않는다
		* 변수간의 값을 문자열로 바꿔주는 코드
		* ex)
		* a = 3;
		* str = a.toString();
		* str = "3"

		* b = true;
		* b.toString();
		* b = "true";
					
	* 모든 자료형은 toSting()코드를 통해 문자열로 바꿀 수 있다
	* 문자열은 number 형으로만 바꾸는 코드(pareInt(), parseFloat())가 제공된다
	* 주의) 문자열을 boolean형으로 바꾸는 기능을 제공하는 코드는 공식적으론 없다
	* 변환을 하려면 직접 변환 코드를 작성해야 한다
  */

//연산자
/**
 	* 산술 연산자(+, -, *, /, %) : 수 계산에 사용한다
 		* %(나머지, 모듈러 연산)의 활용 : 나머지의 값이 항상 나누는 값보다 작다는 점을 이용해서 특정 범위의 값을 얻고 싶을 때 사용한다
 		* 내가 0~2사이에 값을 가지고 싶다면
 		* 특정 수를 3으로 나누고 나머지를취한다
 		*/

			
/**
 * 대입 연산자(*) : 데이터를 변수에 저장하는 연산자
 		* 좌측에는 변수가, 우측에는 값을 적는다
 		* ex )
		* a = a+2;
		* 우측 : 변수a에 저장된 값과 2를 더한 결과값
		* 좌측 : 변수a
		* a+= 2; (축약형태 : 더해서 저장한다)

		* a -= 2; (빼고 저장한다)
		* a *= 2; (곱하고 저장한다)
		* a /= 2; (나누고 저장한다)
		* a %= 2; (나머지를 저장한다)			
		*/
		
//증가 연산자 & 감소 연산자
/**
 	* ++ : 증가연산자, 변수의 값을 1 증가시킨다
 		* b = 1;
 		* b++;
 		* b -> 2
 		* 
	* -- : 감소연산자, 변수의 값을 1 감소시킨다
	 	* b = 0;
	 	* b--;
		* b -> -1;
		* 
	 * 활용 : 데이터의 묶음인 배열(리스트)에서 순서대로 데이터를 찾아갈때 주소에 증가 연산자, 감소 연산자를 활용하여 데이터를 참조한다 
*/

//변수이름++ 와 ++변수이름 의 차이
/**
	* case1)
		* a = 1;
		* x = a++;
		* x -> 1;
		* (변수 x에 먼저 저장하고 변수 a의 값을 1더한다)
		*
	* case2)
		* a = 1;
		* x = ++a;
		* x -> 2, a-> 2
		* (변수 a의 값을 1 더하고, 변수 x에 a의 값을 저장한다)
	*/
			 
//비교 연산자
/**
 * 값의 크기를 비교하는 연산자 결과값이 true 혹은 false로 나타난다
 * ex1) 10 < 20 (10은 20보다 작다) -> true(참)
 * ex2) 20 < 10 (20은 10보다 작다) -> false(거짓)
 * a < b (a는 b보다 작다)
 * a > b (a는 b보다 크다)
 * a <= b (a는 b보다 작거나 같다)
 * a >= b (a는 b보다 크거나 같다)
 * a == b (a와 b는 같다)
 * a != b (a와 b는 다르다)
 */

//삼향 연산자
/**
 * 조건식의 결과에 따라 값이나 처리를 선택하여 처리하는 연산자
 * 
 * 조건식 ? 조건식이 참일 경우의 값 : 조건식이 거짓일 경우의 값
 * 
 * point = 90;
 * a = (point > 75) ? "합격" : "불합격"; -> a = "합격";
 * a -> "합격"
 */

//논리 연산자
/**
 * 여러개의 비교 연산자(조건)를 조합하여 활용하는 연산자
 *
 * 형태 : 조건1 && 조건2
 * 의미 : 조건1 그리고 조건2 (조건1과 조건2가 모두 만족할 때 전체 조건이 참)
 * 사용예 : ((a >= 10) && (a < 50))
 * 
 * 형태 : 조건1 || 조건2
 * 의미 : 조건1 또는 조건2 (조건1과 조건2가 둘중에 하나라도 만족하면 참)
 * 사용예 : ((a == 1) || (a == 100))
 * 
 * 형태 : !조건1
 * 의미 : 조건1이 아니다 (반대)
 * 사용예 : !(a == 100)
 * 
 * 수학적 표기와 다른 것에 주의하자
 * ex)
 * 의미 : a값은 4보다 크고 4.5보다 작거나 같다
 * 수학적표기 : 4 < a <= 4.5
 * 논리연산자 : (4 < a) && (a <= 4.5)
 */

//연산자 우선순위
/**
 * 규칙1 : 괄호()로 둘러싸인 부분을 무조건 먼저 계산한다
 * 규칙2 : 같은 순위일 경우는 왼편부터 계산한다
 * 규칙3 : 대입은 오른쪽부터 시작한다
 * 
 * ex)
 * d/(a+b)*c
 * 실행1 : a+b -> 괄호로 둘러 싸여있어서
 * 실행2 : d/(a+b) -> *,/ 비교했을 때 왼편 먼저 계산한다. 
 * 				불편하니까 괄호를 활용해 표현하는 것이 좋다 (d/(a+b))*c
 * 
 * ex)
 * a = b = c = 1;
 * 실행1 : c = 1;
 * 실행2 : b = c;
 * 실행3 : a = b;
 */